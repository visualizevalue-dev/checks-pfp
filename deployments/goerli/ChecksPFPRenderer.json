{
  "address": "0x40511f6A11CcCaDe4Df4bD7c66fb2CEDa84a225D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "svg",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8c8a4a5012f6e88ebde823b45dc04728cb229dc27b96cb0002e491307231116d",
  "receipt": {
    "to": null,
    "from": "0xC9979381750d5325378CBE36177E7aB037D87CE1",
    "contractAddress": "0x40511f6A11CcCaDe4Df4bD7c66fb2CEDa84a225D",
    "transactionIndex": 12,
    "gasUsed": "1319675",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9d9f0611c96cc72a3442566f32bc6fdee4ad0d58033d427a90735fdc5ee12486",
    "transactionHash": "0x8c8a4a5012f6e88ebde823b45dc04728cb229dc27b96cb0002e491307231116d",
    "logs": [],
    "blockNumber": 9693385,
    "cumulativeGasUsed": "4137084",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2de5aa5fd72ae7d510e45a89dea56421",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"svg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"svg(uint256)\":{\"details\":\"Render the SVG.\",\"params\":{\"tokenId\":\"The token to render.\"}},\"tokenURI(uint256,address)\":{\"details\":\"Render the metadata for the token.\",\"params\":{\"owner\":\"The current owner of the token.\",\"tokenId\":\"The token to render.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ChecksPFPRenderer.sol\":\"ChecksPFPRenderer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"contracts/ChecksPFPRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\nimport \\\"./interfaces/IChecks.sol\\\";\\nimport \\\"./interfaces/IRenderer.sol\\\";\\nimport \\\"./libraries/Utilities.sol\\\";\\n\\ncontract ChecksPFPRenderer is IRenderer {\\n\\n    IChecks checks = IChecks(0x036721e5A769Cc48B3189EFbb9ccE4471E8A48B1);\\n\\n    /// @dev Render the metadata for the token.\\n    /// @param tokenId The token to render.\\n    /// @param owner The current owner of the token.\\n    function tokenURI(uint256 tokenId, address owner) public view returns (string memory) {\\n        bool linked = checks.ownerOf(tokenId) == owner;\\n\\n        return string.concat(\\n            \\\"data:application/json;base64,\\\",\\n            Base64.encode(abi.encodePacked(renderMetadata(tokenId, linked)))\\n        );\\n    }\\n\\n    /// @dev Render the SVG.\\n    /// @param tokenId The token to render.\\n    function svg(uint256 tokenId) public view returns (string memory) {\\n        (string[] memory colors,) = checks.colors(tokenId);\\n        uint256 count = colors.length;\\n\\n        return string.concat(\\n            '<svg ',\\n                'viewBox=\\\"0 0 608 608\\\" ',\\n                'fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" ',\\n                'style=\\\"width:100vw;height:100vh;background:#808080;margin:auto;\\\"',\\n            '>',\\n                renderBackground(count, colors),\\n                renderChecks(count),\\n                renderDefs(tokenId),\\n            '</svg>'\\n        );\\n    }\\n\\n    /// @dev Render the JSON token metadata.\\n    /// @param tokenId The token to render.\\n    /// @param linked Whether the token is linked.\\n    function renderMetadata(uint256 tokenId, bool linked) private view returns (string memory) {\\n        string memory id = Utilities.uint2str(tokenId);\\n\\n        string memory img = string.concat('\\\"data:image/svg+xml;base64,', Base64.encode(abi.encodePacked(svg(tokenId))));\\n        string memory description = linked\\n            ? string.concat('PFP mirroring VV Checks #',id)\\n            : string.concat('PFP for VV Checks #',id,'. Relink to its current owner on the VV Checks website.');\\n\\n        return string.concat(\\n            '{',\\n                '\\\"name\\\": \\\"Checks PFP #',id,'\\\",',\\n                '\\\"description\\\": \\\"',description,'\\\",',\\n                '\\\"image\\\": \\\"https://api.checks.art/checks/',id,'/pfp.png\\\",',\\n                '\\\"svg\\\": ',img,'\\\",',\\n                '\\\"animation_uri\\\": ',img,'\\\",',\\n                '\\\"attributes\\\": [', attributes(linked), ']',\\n            '}'\\n        );\\n    }\\n\\n    /// @dev Render the background of the SVG.\\n    /// @param count Number of checks in the token.\\n    /// @param colors The colors of the checks token.\\n    function renderBackground(uint256 count, string[] memory colors) private pure returns (string memory) {\\n        string memory color = count > 1 ? '000' : colors[0];\\n\\n        return string.concat('<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"608\\\" height=\\\"608\\\" fill=\\\"#',color,'\\\" />');\\n    }\\n\\n    /// @dev Render the pfp body.\\n    /// @param count Number of checks in the token.\\n    function renderChecks(uint256 count) private pure returns (string memory) {\\n        return string.concat(\\n            '<rect x=\\\"152\\\" y=\\\"152\\\" width=\\\"304\\\" height=\\\"304\\\" fill=\\\"#111\\\" />',\\n            '<rect x=\\\"152\\\" y=\\\"520\\\" width=\\\"304\\\" height=\\\"88\\\" fill=\\\"#111\\\" />',\\n            '<mask id=\\\"head\\\">',\\n                count < 5\\n                    ? '<rect x=\\\"195\\\" y=\\\"195.5\\\" width=\\\"290\\\" height=\\\"289\\\" fill=\\\"white\\\" />'\\n                    : '<rect x=\\\"195\\\" y=\\\"159\\\" width=\\\"290\\\" height=\\\"289.5\\\" fill=\\\"white\\\" />',\\n            '</mask>',\\n\\n            '<mask id=\\\"torso\\\">',\\n                '<rect x=\\\"195\\\" y=\\\"447.5\\\" width=\\\"290\\\" height=\\\"73\\\" fill=\\\"white\\\" />',\\n            '</mask>',\\n\\n            '<g mask=\\\"url(#head)\\\" transform=\\\"translate(-36,', count < 5 ? '-36' : '0' ,')\\\">',\\n                '<use href=\\\"#token\\\" />',\\n            '</g>',\\n\\n            '<g mask=\\\"url(#torso)\\\" transform=\\\"translate(-36,80)\\\">',\\n                '<use href=\\\"#token\\\" />',\\n            '</g>'\\n        );\\n    }\\n\\n    /// @dev Render the <defs> section of the SVG.\\n    /// @param tokenId The check to render.\\n    function renderDefs(uint256 tokenId) private view returns (string memory) {\\n        return string.concat(\\n            '<defs>',\\n                '<g id=\\\"token\\\">',\\n                    '<svg viewBox=\\\"0 0 680 680\\\" width=\\\"680\\\" height=\\\"680\\\" style=\\\"pointer-events:none;\\\">',\\n                        checks.svg(tokenId),\\n                    '</svg>',\\n                '</g>',\\n            '</defs>'\\n        );\\n    }\\n\\n    /// @dev Render the JSON attributes for a Checks PFP.\\n    /// @param linked Whether the token is owned by the same address as its check.\\n    function attributes(bool linked) private pure returns (string memory) {\\n        return string.concat(\\n            trait('Status', linked ? 'Linked' : 'Unlinked', '')\\n        );\\n    }\\n\\n    /// @dev Generate the JSON snippet for a single attribute.\\n    /// @param traitType The `trait_type` for this trait.\\n    /// @param traitValue The `value` for this trait.\\n    /// @param append Helper to append a comma.\\n    function trait(\\n        string memory traitType, string memory traitValue, string memory append\\n    ) private pure returns (string memory) {\\n        return string(abi.encodePacked(\\n            '{',\\n                '\\\"trait_type\\\": \\\"', traitType, '\\\",'\\n                '\\\"value\\\": \\\"', traitValue, '\\\"'\\n            '}',\\n            append\\n        ));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1ad09f05ed193028085da8cd6574933550106a8b1663347eb948fa07d43208fd\",\"license\":\"MIT\"},\"contracts/interfaces/IChecks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IChecks {\\n\\n    struct StoredCheck {\\n        uint16[6] composites;  // The tokenIds that were composited into this one\\n        uint8[5] colorBands;  // The length of the used color band in percent\\n        uint8[5] gradients;  // Gradient settings for each generation\\n        uint8 divisorIndex; // Easy access to next / previous divisor\\n        uint32 epoch;      // Each check is revealed in an epoch\\n        uint16 seed;      // A unique identifyer to enable swapping\\n        uint24 day;      // The days since token was created\\n    }\\n\\n    struct Check {\\n        StoredCheck stored;    // We carry over the check from storage\\n        bool isRevealed;      // Whether the check is revealed\\n        uint256 seed;        // The instantiated seed for pseudo-randomisation\\n\\n        uint8 checksCount;    // How many checks this token has\\n        bool hasManyChecks;  // Whether the check has many checks\\n        uint16 composite;   // The parent tokenId that was composited into this one\\n        bool isRoot;       // Whether it has no parents (80 checks)\\n\\n        uint8 colorBand;    // 100%, 50%, 25%, 12.5%, 6.25%, 5%, 1.25%\\n        uint8 gradient;    // Linearly through the colorBand [1, 2, 3]\\n        uint8 direction;  // Animation direction\\n        uint8 speed;     // Animation speed\\n    }\\n\\n    function getCheck(uint256 tokenId) external view returns (Check memory check);\\n\\n    function colors(uint256 tokenId) external view returns (string[] memory, uint256[] memory);\\n\\n    function svg(uint256 tokenId) external view returns (string memory);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n}\\n\",\"keccak256\":\"0x89e5efff0684d5fe1371ff469395506c1bc3aadd296cb81a9eacbba0d64a61ea\",\"license\":\"MIT\"},\"contracts/interfaces/IRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IRenderer {\\n    function tokenURI(uint256 tokenId, address owner) external view returns (string memory);\\n\\n    function svg(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xcce73706934d38c6afbd704255269a11c3c2bf4dc52a704708f8ec9ce3f680c4\",\"license\":\"MIT\"},\"contracts/libraries/Utilities.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary Utilities {\\n    /// @dev Zero-index based salted pseudorandom number based on two inputs and max bound\\n    function random(uint256 input, string memory salt, uint256 _max) public pure returns (uint256) {\\n        return (uint256(keccak256(abi.encodePacked(input, salt))) % _max);\\n    }\\n\\n    /// @dev Convert an integer to a string\\n    function uint2str(uint256 _i) public pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            ++len;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    /// @dev Get the larger number\\n    function max(uint8 one, uint8 two) public pure returns (uint8) {\\n        return one > two ? one : two;\\n    }\\n}\\n\",\"keccak256\":\"0xd2875b8e7ff76892aedfd8507a66f4ca4537d4fc2a5273886816d728213a4e2c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806344b285db1461003b5780638c4c1b2f14610064575b600080fd5b61004e6100493660046107e5565b610077565b60405161005b9190610822565b60405180910390f35b61004e61007236600461086d565b610150565b600080546040517fbd11f69d00000000000000000000000000000000000000000000000000000000815260048101849052606092916001600160a01b03169063bd11f69d90602401600060405180830381865afa1580156100dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261010491908101906109df565b5080519091506101148183610244565b61011d826102ba565b6101268661039d565b60405160200161013893929190610ad2565b60405160208183030381529060405292505050919050565b600080546040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101859052606092916001600160a01b0385811692911690636352211e90602401602060405180830381865afa1580156101ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101de9190610c3d565b6001600160a01b031614905061021b6101f78583610438565b6040516020016102079190610c61565b60405160208183030381529060405261058c565b60405160200161022b9190610c7d565b6040516020818303038152906040529150505b92915050565b6060600060018411610270578260008151811061026357610263610cc2565b60200260200101516102a7565b6040518060400160405280600381526020017f30303000000000000000000000000000000000000000000000000000000000008152505b90508060405160200161022b9190610cd8565b6060600582106102e2576040518060600160405280604081526020016115f8604091396102fc565b6040518060600160405280604081526020016115b8604091395b6005831061033f576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250610376565b6040518060400160405280600381526020017f2d333600000000000000000000000000000000000000000000000000000000008152505b604051602001610387929190610d6a565b6040516020818303038152906040529050919050565b6000546040517f44b285db000000000000000000000000000000000000000000000000000000008152600481018390526060916001600160a01b0316906344b285db90602401600060405180830381865afa158015610400573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104289190810190611004565b6040516020016103879190611039565b6040517ff76f950e0000000000000000000000000000000000000000000000000000000081526004810183905260609060009073__$bd654521c54dee0917bb5ce7a9c0751ede$__9063f76f950e90602401600060405180830381865af41580156104a7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104cf9190810190611004565b905060006104df6101f786610077565b6040516020016104ef9190611159565b604051602081830303815290604052905060008461052c5782604051602001610518919061119e565b60405160208183030381529060405261054d565b8260405160200161053d9190611230565b6040516020818303038152906040525b9050828184848561055d8a6106df565b60405160200161057296959493929190611275565b604051602081830303815290604052935050505092915050565b606081516000036105ab57505060408051602081019091526000815290565b600060405180606001604052806040815260200161163860409139905060006003845160026105da91906114a1565b6105e491906114b4565b6105ef9060046114d6565b67ffffffffffffffff8111156106075761060761089d565b6040519080825280601f01601f191660200182016040528015610631576020820181803683370190505b509050600182016020820185865187015b8082101561069d576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845350600183019250610642565b50506003865106600181146106b957600281146106cc576106d4565b603d6001830353603d60028303536106d4565b603d60018303535b509195945050505050565b60606107a66040518060400160405280600681526020017f53746174757300000000000000000000000000000000000000000000000000008152508361075a576040518060400160405280600881526020017f556e6c696e6b6564000000000000000000000000000000000000000000000000815250610791565b6040518060400160405280600681526020017f4c696e6b656400000000000000000000000000000000000000000000000000008152505b604051806020016040528060008152506107b6565b6040516020016103879190610c61565b60608383836040516020016107cd939291906114ed565b60405160208183030381529060405290509392505050565b6000602082840312156107f757600080fd5b5035919050565b60005b83811015610819578181015183820152602001610801565b50506000910152565b60208152600082518060208401526108418160408501602087016107fe565b601f01601f19169190910160400192915050565b6001600160a01b038116811461086a57600080fd5b50565b6000806040838503121561088057600080fd5b82359150602083013561089281610855565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156108dc576108dc61089d565b604052919050565b600067ffffffffffffffff8211156108fe576108fe61089d565b5060051b60200190565b600082601f83011261091957600080fd5b815167ffffffffffffffff8111156109335761093361089d565b610946601f8201601f19166020016108b3565b81815284602083860101111561095b57600080fd5b61096c8260208301602087016107fe565b949350505050565b600082601f83011261098557600080fd5b8151602061099a610995836108e4565b6108b3565b82815260059290921b840181019181810190868411156109b957600080fd5b8286015b848110156109d457805183529183019183016109bd565b509695505050505050565b600080604083850312156109f257600080fd5b825167ffffffffffffffff80821115610a0a57600080fd5b818501915085601f830112610a1e57600080fd5b81516020610a2e610995836108e4565b82815260059290921b84018101918181019089841115610a4d57600080fd5b8286015b84811015610a8557805186811115610a695760008081fd5b610a778c86838b0101610908565b845250918301918301610a51565b5091880151919650909350505080821115610a9f57600080fd5b50610aac85828601610974565b9150509250929050565b60008151610ac88185602086016107fe565b9290920192915050565b7f3c7376672000000000000000000000000000000000000000000000000000000081527f76696577426f783d22302030203630382036303822200000000000000000000060058201527f66696c6c3d226e6f6e652220786d6c6e733d22687474703a2f2f7777772e7733601b8201527f2e6f72672f323030302f73766722200000000000000000000000000000000000603b8201527f7374796c653d2277696474683a31303076773b6865696768743a31303076683b604a8201527f6261636b67726f756e643a233830383038303b6d617267696e3a6175746f3b22606a8201527f3e00000000000000000000000000000000000000000000000000000000000000608a82015260008451610bee81608b8501602089016107fe565b845190830190610c0581608b8401602089016107fe565b8451910190610c1b81608b8401602088016107fe565b01610c31608b8201651e17b9bb339f60d11b9052565b60910195945050505050565b600060208284031215610c4f57600080fd5b8151610c5a81610855565b9392505050565b60008251610c738184602087016107fe565b9190910192915050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251610cb581601d8501602087016107fe565b91909101601d0192915050565b634e487b7160e01b600052603260045260246000fd5b7f3c7265637420783d22302220793d2230222077696474683d223630382220686581527f696768743d22363038222066696c6c3d22230000000000000000000000000000602082015260008251610d368160328501602087016107fe565b7f22202f3e000000000000000000000000000000000000000000000000000000006032939091019283015250603601919050565b7f3c7265637420783d223135322220793d22313532222077696474683d2233303481527f22206865696768743d22333034222066696c6c3d222331313122202f3e00000060208201527f3c7265637420783d223135322220793d22353230222077696474683d22333034603d8201527f22206865696768743d223838222066696c6c3d222331313122202f3e00000000605d8201527f3c6d61736b2069643d2268656164223e0000000000000000000000000000000060798201526000610e346089830185610ab6565b661e17b6b0b9b59f60c91b81527f3c6d61736b2069643d22746f72736f223e00000000000000000000000000000060078201527f3c7265637420783d223139352220793d223434372e35222077696474683d223260188201527f393022206865696768743d223733222066696c6c3d22776869746522202f3e00603882015260578101661e17b6b0b9b59f60c91b815290507f3c67206d61736b3d2275726c2823686561642922207472616e73666f726d3d2260078201527f7472616e736c617465282d33362c0000000000000000000000000000000000006027820152610f1f6035820185610ab6565b7f29223e0000000000000000000000000000000000000000000000000000000000815290507f3c75736520687265663d2223746f6b656e22202f3e00000000000000000000006003820152631e17b39f60e11b60188201527f3c67206d61736b3d2275726c2823746f72736f2922207472616e73666f726d3d601c8201527f227472616e736c617465282d33362c383029223e000000000000000000000000603c820152605081017f3c75736520687265663d2223746f6b656e22202f3e000000000000000000000081529050631e17b39f60e11b6015820152601901949350505050565b60006020828403121561101657600080fd5b815167ffffffffffffffff81111561102d57600080fd5b61096c84828501610908565b7f3c646566733e000000000000000000000000000000000000000000000000000081527f3c672069643d22746f6b656e223e00000000000000000000000000000000000060068201527f3c7376672076696577426f783d2230203020363830203638302220776964746860148201527f3d2236383022206865696768743d2236383022207374796c653d22706f696e7460348201527f65722d6576656e74733a6e6f6e653b223e0000000000000000000000000000006054820152600082516111098160658501602087016107fe565b651e17b9bb339f60d11b6065939091019283015250631e17b39f60e11b606b8201527f3c2f646566733e00000000000000000000000000000000000000000000000000606f820152607601919050565b7f22646174613a696d6167652f7376672b786d6c3b6261736536342c000000000081526000825161119181601b8501602087016107fe565b91909101601b0192915050565b7f50465020666f7220565620436865636b732023000000000000000000000000008152600082516111d68160138501602087016107fe565b7f2e2052656c696e6b20746f206974732063757272656e74206f776e6572206f6e60139390910192830152507f2074686520565620436865636b7320776562736974652e0000000000000000006033820152604a01919050565b7f504650206d6972726f72696e6720565620436865636b732023000000000000008152600082516112688160198501602087016107fe565b9190910160190192915050565b607b60f81b81527f226e616d65223a2022436865636b7320504650202300000000000000000000006001820152600087516112b7816016850160208c016107fe565b82016112ca6016820161088b60f21b9052565b7f226465736372697074696f6e223a20220000000000000000000000000000000060188201526112fd6028820189610ab6565b61088b60f21b815290507f22696d616765223a202268747470733a2f2f6170692e636865636b732e61727460028201527f2f636865636b732f0000000000000000000000000000000000000000000000006022820152611360602a820188610ab6565b7f2f7066702e706e67222c00000000000000000000000000000000000000000000815290507f22737667223a2000000000000000000000000000000000000000000000000000600a8201526113b86011820187610ab6565b61088b60f21b815290507f22616e696d6174696f6e5f757269223a2000000000000000000000000000000060028201526113f56013820186610ab6565b61088b60f21b815290507f2261747472696275746573223a205b000000000000000000000000000000000060028201526114326011820185610ab6565b7f5d0000000000000000000000000000000000000000000000000000000000000081527f7d0000000000000000000000000000000000000000000000000000000000000060018201526002019998505050505050505050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561023e5761023e61148b565b6000826114d157634e487b7160e01b600052601260045260246000fd5b500490565b808202811582820484141761023e5761023e61148b565b607b60f81b81527f2274726169745f74797065223a2022000000000000000000000000000000000060018201526000845161152f8160108501602089016107fe565b7f222c2276616c7565223a20220000000000000000000000000000000000000000601091840191820152845161156c81601c8401602089016107fe565b7f227d000000000000000000000000000000000000000000000000000000000000601c929091019182015283516115aa81601e8401602088016107fe565b01601e019594505050505056fe3c7265637420783d223139352220793d223139352e35222077696474683d2232393022206865696768743d22323839222066696c6c3d22776869746522202f3e3c7265637420783d223139352220793d22313539222077696474683d2232393022206865696768743d223238392e35222066696c6c3d22776869746522202f3e4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212202828f67b5a65b5016a03efd1ee5e4530531e441077c5d51814e17a60376bb53e64736f6c63430008140033",
  "libraries": {
    "Utilities": "0x9a4DCF3Fd4174F8F170F9b31eAf16001529ae613"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "svg(uint256)": {
        "details": "Render the SVG.",
        "params": {
          "tokenId": "The token to render."
        }
      },
      "tokenURI(uint256,address)": {
        "details": "Render the metadata for the token.",
        "params": {
          "owner": "The current owner of the token.",
          "tokenId": "The token to render."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2916,
        "contract": "contracts/ChecksPFPRenderer.sol:ChecksPFPRenderer",
        "label": "checks",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IChecks)3310"
      }
    ],
    "types": {
      "t_contract(IChecks)3310": {
        "encoding": "inplace",
        "label": "contract IChecks",
        "numberOfBytes": "20"
      }
    }
  }
}